---
import "@styles/print.css";
import "@styles/global.css";
import "@styles/background.css";
import "remixicon/fonts/remixicon.css";

import type { MarkdownHeading } from "astro";
import Header from "@components/layout/Header.astro";
import Hero from "@components/layout/Hero.astro";
import Sidebar from "@components/layout/Sidebar.astro";
import Footer from "@components/layout/Footer.astro";
import BackToTop from "@components/widgets/BackToTop.astro";

const SITE_TITLE = "ZSX的小站";
const SITE_DESCRIPTION = "造化钟神秀，阴阳割昏晓";
const SITE_AUTHOR = "钟神秀";
const OG_IMAGE_DEFAULT = "https://img.314926.xyz/images/2025/09/20/zsx-avatar.webp";
const TWITTER_HANDLE = "@kemiaojun";
const GITHUB_URL = "https://github.com/zsxsw";
const TELEGRAM_URL = "https://t.mezhzsx_me";

export interface Props {
  title: string;
  description?: string;
  image?: string;
  headings?: MarkdownHeading[];
  showHero?: boolean;
}

const {
  title,
  description = SITE_DESCRIPTION,
  image = OG_IMAGE_DEFAULT,
  headings = [],
  showHero = title === "首页",
} = Astro.props;

const finalTitle = title === "首页" ? SITE_TITLE : `${title} | ${SITE_TITLE}`;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(image, Astro.site);
---

<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="author" content={SITE_AUTHOR} />

    <title>{finalTitle}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <link rel="icon" href="/favicon.ico" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon.svg"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon-dark.svg"
      media="(prefers-color-scheme: dark)"
    />

    <meta property="og:title" content={finalTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={SITE_TITLE} />
    <meta property="og:locale" content="zh_CN" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content={TWITTER_HANDLE} />
    <meta name="twitter:title" content={finalTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />
  </head>
  <body class="bg-base-100 text-base-content min-h-screen topography">
    <Header siteTitle={SITE_TITLE} />

    {showHero && <Hero siteDescription={SITE_DESCRIPTION} />}

    <div
      id="main-content-grid"
      class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8"
    >
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-4">
        <main class="lg:col-span-3 min-h-[60vh]">
          <slot />
        </main>

        <Sidebar
          headings={headings}
          author={SITE_AUTHOR}
          twitterHandle={TWITTER_HANDLE}
          githubUrl={GITHUB_URL}
          telegramUrl={TELEGRAM_URL}
        />
      </div>
    </div>

    <Footer
      author={SITE_AUTHOR}
      twitterHandle={TWITTER_HANDLE}
      githubUrl={GITHUB_URL}
      telegramUrl={TELEGRAM_URL}
    />

    <BackToTop />
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".btn-copy").forEach((button) => {
          button.addEventListener("click", async () => {
            const codeBlock = button.closest(".saro-code");
            const code = codeBlock.querySelector("code").textContent;
            const copyIcon = button.querySelector(
              ".saro-code-toolbar-copy-icon",
            );
            const successIcon = button.querySelector(
              ".saro-code-toolbar-copy-success",
            );
            try {
              await navigator.clipboard.writeText(code);
              copyIcon.classList.add("hidden");
              successIcon.classList.remove("hidden");
              button.classList.add("copy-success");
              setTimeout(() => {
                copyIcon.classList.remove("hidden");
                successIcon.classList.add("hidden");
                button.classList.remove("copy-success");
              }, 2000);
            } catch (err) {
              console.error("Failed to copy:", err);
            }
          });
        });
      });
    </script>
  </body>
</html>
